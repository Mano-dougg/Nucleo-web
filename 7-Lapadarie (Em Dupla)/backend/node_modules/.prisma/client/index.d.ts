
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Bread
 * 
 */
export type Bread = $Result.DefaultSelection<Prisma.$BreadPayload>
/**
 * Model OrderList
 * 
 */
export type OrderList = $Result.DefaultSelection<Prisma.$OrderListPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Breads
 * const breads = await prisma.bread.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Breads
   * const breads = await prisma.bread.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.bread`: Exposes CRUD operations for the **Bread** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Breads
    * const breads = await prisma.bread.findMany()
    * ```
    */
  get bread(): Prisma.BreadDelegate<ExtArgs>;

  /**
   * `prisma.orderList`: Exposes CRUD operations for the **OrderList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderLists
    * const orderLists = await prisma.orderList.findMany()
    * ```
    */
  get orderList(): Prisma.OrderListDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Bread: 'Bread',
    OrderList: 'OrderList'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'bread' | 'orderList'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Bread: {
        payload: Prisma.$BreadPayload<ExtArgs>
        fields: Prisma.BreadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BreadFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BreadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BreadFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BreadPayload>
          }
          findFirst: {
            args: Prisma.BreadFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BreadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BreadFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BreadPayload>
          }
          findMany: {
            args: Prisma.BreadFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BreadPayload>[]
          }
          create: {
            args: Prisma.BreadCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BreadPayload>
          }
          createMany: {
            args: Prisma.BreadCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BreadCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BreadPayload>[]
          }
          delete: {
            args: Prisma.BreadDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BreadPayload>
          }
          update: {
            args: Prisma.BreadUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BreadPayload>
          }
          deleteMany: {
            args: Prisma.BreadDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BreadUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BreadUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BreadPayload>
          }
          aggregate: {
            args: Prisma.BreadAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBread>
          }
          groupBy: {
            args: Prisma.BreadGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BreadGroupByOutputType>[]
          }
          count: {
            args: Prisma.BreadCountArgs<ExtArgs>,
            result: $Utils.Optional<BreadCountAggregateOutputType> | number
          }
        }
      }
      OrderList: {
        payload: Prisma.$OrderListPayload<ExtArgs>
        fields: Prisma.OrderListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderListFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderListFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderListPayload>
          }
          findFirst: {
            args: Prisma.OrderListFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderListFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderListPayload>
          }
          findMany: {
            args: Prisma.OrderListFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderListPayload>[]
          }
          create: {
            args: Prisma.OrderListCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderListPayload>
          }
          createMany: {
            args: Prisma.OrderListCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderListCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderListPayload>[]
          }
          delete: {
            args: Prisma.OrderListDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderListPayload>
          }
          update: {
            args: Prisma.OrderListUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderListPayload>
          }
          deleteMany: {
            args: Prisma.OrderListDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrderListUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrderListUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderListPayload>
          }
          aggregate: {
            args: Prisma.OrderListAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrderList>
          }
          groupBy: {
            args: Prisma.OrderListGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrderListGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderListCountArgs<ExtArgs>,
            result: $Utils.Optional<OrderListCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrderListCountOutputType
   */

  export type OrderListCountOutputType = {
    breadItems: number
  }

  export type OrderListCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    breadItems?: boolean | OrderListCountOutputTypeCountBreadItemsArgs
  }

  // Custom InputTypes
  /**
   * OrderListCountOutputType without action
   */
  export type OrderListCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderListCountOutputType
     */
    select?: OrderListCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderListCountOutputType without action
   */
  export type OrderListCountOutputTypeCountBreadItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BreadWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Bread
   */

  export type AggregateBread = {
    _count: BreadCountAggregateOutputType | null
    _avg: BreadAvgAggregateOutputType | null
    _sum: BreadSumAggregateOutputType | null
    _min: BreadMinAggregateOutputType | null
    _max: BreadMaxAggregateOutputType | null
  }

  export type BreadAvgAggregateOutputType = {
    id: number | null
    price: number | null
    quantity: number | null
    orderId: number | null
  }

  export type BreadSumAggregateOutputType = {
    id: number | null
    price: number | null
    quantity: number | null
    orderId: number | null
  }

  export type BreadMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    quantity: number | null
    orderId: number | null
  }

  export type BreadMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    quantity: number | null
    orderId: number | null
  }

  export type BreadCountAggregateOutputType = {
    id: number
    name: number
    price: number
    quantity: number
    orderId: number
    _all: number
  }


  export type BreadAvgAggregateInputType = {
    id?: true
    price?: true
    quantity?: true
    orderId?: true
  }

  export type BreadSumAggregateInputType = {
    id?: true
    price?: true
    quantity?: true
    orderId?: true
  }

  export type BreadMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    quantity?: true
    orderId?: true
  }

  export type BreadMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    quantity?: true
    orderId?: true
  }

  export type BreadCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    quantity?: true
    orderId?: true
    _all?: true
  }

  export type BreadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bread to aggregate.
     */
    where?: BreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Breads to fetch.
     */
    orderBy?: BreadOrderByWithRelationInput | BreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Breads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Breads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Breads
    **/
    _count?: true | BreadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BreadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BreadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BreadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BreadMaxAggregateInputType
  }

  export type GetBreadAggregateType<T extends BreadAggregateArgs> = {
        [P in keyof T & keyof AggregateBread]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBread[P]>
      : GetScalarType<T[P], AggregateBread[P]>
  }




  export type BreadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BreadWhereInput
    orderBy?: BreadOrderByWithAggregationInput | BreadOrderByWithAggregationInput[]
    by: BreadScalarFieldEnum[] | BreadScalarFieldEnum
    having?: BreadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BreadCountAggregateInputType | true
    _avg?: BreadAvgAggregateInputType
    _sum?: BreadSumAggregateInputType
    _min?: BreadMinAggregateInputType
    _max?: BreadMaxAggregateInputType
  }

  export type BreadGroupByOutputType = {
    id: number
    name: string
    price: number
    quantity: number
    orderId: number
    _count: BreadCountAggregateOutputType | null
    _avg: BreadAvgAggregateOutputType | null
    _sum: BreadSumAggregateOutputType | null
    _min: BreadMinAggregateOutputType | null
    _max: BreadMaxAggregateOutputType | null
  }

  type GetBreadGroupByPayload<T extends BreadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BreadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BreadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BreadGroupByOutputType[P]>
            : GetScalarType<T[P], BreadGroupByOutputType[P]>
        }
      >
    >


  export type BreadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    quantity?: boolean
    orderId?: boolean
    order?: boolean | OrderListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bread"]>

  export type BreadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    quantity?: boolean
    orderId?: boolean
    order?: boolean | OrderListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bread"]>

  export type BreadSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    quantity?: boolean
    orderId?: boolean
  }

  export type BreadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderListDefaultArgs<ExtArgs>
  }
  export type BreadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderListDefaultArgs<ExtArgs>
  }

  export type $BreadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bread"
    objects: {
      order: Prisma.$OrderListPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      price: number
      quantity: number
      orderId: number
    }, ExtArgs["result"]["bread"]>
    composites: {}
  }

  type BreadGetPayload<S extends boolean | null | undefined | BreadDefaultArgs> = $Result.GetResult<Prisma.$BreadPayload, S>

  type BreadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BreadFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BreadCountAggregateInputType | true
    }

  export interface BreadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bread'], meta: { name: 'Bread' } }
    /**
     * Find zero or one Bread that matches the filter.
     * @param {BreadFindUniqueArgs} args - Arguments to find a Bread
     * @example
     * // Get one Bread
     * const bread = await prisma.bread.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BreadFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BreadFindUniqueArgs<ExtArgs>>
    ): Prisma__BreadClient<$Result.GetResult<Prisma.$BreadPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Bread that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BreadFindUniqueOrThrowArgs} args - Arguments to find a Bread
     * @example
     * // Get one Bread
     * const bread = await prisma.bread.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BreadFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BreadFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BreadClient<$Result.GetResult<Prisma.$BreadPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Bread that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreadFindFirstArgs} args - Arguments to find a Bread
     * @example
     * // Get one Bread
     * const bread = await prisma.bread.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BreadFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BreadFindFirstArgs<ExtArgs>>
    ): Prisma__BreadClient<$Result.GetResult<Prisma.$BreadPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Bread that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreadFindFirstOrThrowArgs} args - Arguments to find a Bread
     * @example
     * // Get one Bread
     * const bread = await prisma.bread.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BreadFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BreadFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BreadClient<$Result.GetResult<Prisma.$BreadPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Breads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Breads
     * const breads = await prisma.bread.findMany()
     * 
     * // Get first 10 Breads
     * const breads = await prisma.bread.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const breadWithIdOnly = await prisma.bread.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BreadFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BreadFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BreadPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Bread.
     * @param {BreadCreateArgs} args - Arguments to create a Bread.
     * @example
     * // Create one Bread
     * const Bread = await prisma.bread.create({
     *   data: {
     *     // ... data to create a Bread
     *   }
     * })
     * 
    **/
    create<T extends BreadCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BreadCreateArgs<ExtArgs>>
    ): Prisma__BreadClient<$Result.GetResult<Prisma.$BreadPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Breads.
     * @param {BreadCreateManyArgs} args - Arguments to create many Breads.
     * @example
     * // Create many Breads
     * const bread = await prisma.bread.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends BreadCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BreadCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Breads and returns the data saved in the database.
     * @param {BreadCreateManyAndReturnArgs} args - Arguments to create many Breads.
     * @example
     * // Create many Breads
     * const bread = await prisma.bread.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Breads and only return the `id`
     * const breadWithIdOnly = await prisma.bread.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends BreadCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, BreadCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BreadPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Bread.
     * @param {BreadDeleteArgs} args - Arguments to delete one Bread.
     * @example
     * // Delete one Bread
     * const Bread = await prisma.bread.delete({
     *   where: {
     *     // ... filter to delete one Bread
     *   }
     * })
     * 
    **/
    delete<T extends BreadDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BreadDeleteArgs<ExtArgs>>
    ): Prisma__BreadClient<$Result.GetResult<Prisma.$BreadPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Bread.
     * @param {BreadUpdateArgs} args - Arguments to update one Bread.
     * @example
     * // Update one Bread
     * const bread = await prisma.bread.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BreadUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BreadUpdateArgs<ExtArgs>>
    ): Prisma__BreadClient<$Result.GetResult<Prisma.$BreadPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Breads.
     * @param {BreadDeleteManyArgs} args - Arguments to filter Breads to delete.
     * @example
     * // Delete a few Breads
     * const { count } = await prisma.bread.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BreadDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BreadDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Breads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Breads
     * const bread = await prisma.bread.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BreadUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BreadUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bread.
     * @param {BreadUpsertArgs} args - Arguments to update or create a Bread.
     * @example
     * // Update or create a Bread
     * const bread = await prisma.bread.upsert({
     *   create: {
     *     // ... data to create a Bread
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bread we want to update
     *   }
     * })
    **/
    upsert<T extends BreadUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BreadUpsertArgs<ExtArgs>>
    ): Prisma__BreadClient<$Result.GetResult<Prisma.$BreadPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Breads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreadCountArgs} args - Arguments to filter Breads to count.
     * @example
     * // Count the number of Breads
     * const count = await prisma.bread.count({
     *   where: {
     *     // ... the filter for the Breads we want to count
     *   }
     * })
    **/
    count<T extends BreadCountArgs>(
      args?: Subset<T, BreadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BreadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BreadAggregateArgs>(args: Subset<T, BreadAggregateArgs>): Prisma.PrismaPromise<GetBreadAggregateType<T>>

    /**
     * Group by Bread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BreadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BreadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BreadGroupByArgs['orderBy'] }
        : { orderBy?: BreadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BreadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBreadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bread model
   */
  readonly fields: BreadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bread.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BreadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    order<T extends OrderListDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderListDefaultArgs<ExtArgs>>): Prisma__OrderListClient<$Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Bread model
   */ 
  interface BreadFieldRefs {
    readonly id: FieldRef<"Bread", 'Int'>
    readonly name: FieldRef<"Bread", 'String'>
    readonly price: FieldRef<"Bread", 'Float'>
    readonly quantity: FieldRef<"Bread", 'Int'>
    readonly orderId: FieldRef<"Bread", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Bread findUnique
   */
  export type BreadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bread
     */
    select?: BreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreadInclude<ExtArgs> | null
    /**
     * Filter, which Bread to fetch.
     */
    where: BreadWhereUniqueInput
  }

  /**
   * Bread findUniqueOrThrow
   */
  export type BreadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bread
     */
    select?: BreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreadInclude<ExtArgs> | null
    /**
     * Filter, which Bread to fetch.
     */
    where: BreadWhereUniqueInput
  }

  /**
   * Bread findFirst
   */
  export type BreadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bread
     */
    select?: BreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreadInclude<ExtArgs> | null
    /**
     * Filter, which Bread to fetch.
     */
    where?: BreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Breads to fetch.
     */
    orderBy?: BreadOrderByWithRelationInput | BreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Breads.
     */
    cursor?: BreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Breads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Breads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Breads.
     */
    distinct?: BreadScalarFieldEnum | BreadScalarFieldEnum[]
  }

  /**
   * Bread findFirstOrThrow
   */
  export type BreadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bread
     */
    select?: BreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreadInclude<ExtArgs> | null
    /**
     * Filter, which Bread to fetch.
     */
    where?: BreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Breads to fetch.
     */
    orderBy?: BreadOrderByWithRelationInput | BreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Breads.
     */
    cursor?: BreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Breads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Breads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Breads.
     */
    distinct?: BreadScalarFieldEnum | BreadScalarFieldEnum[]
  }

  /**
   * Bread findMany
   */
  export type BreadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bread
     */
    select?: BreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreadInclude<ExtArgs> | null
    /**
     * Filter, which Breads to fetch.
     */
    where?: BreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Breads to fetch.
     */
    orderBy?: BreadOrderByWithRelationInput | BreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Breads.
     */
    cursor?: BreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Breads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Breads.
     */
    skip?: number
    distinct?: BreadScalarFieldEnum | BreadScalarFieldEnum[]
  }

  /**
   * Bread create
   */
  export type BreadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bread
     */
    select?: BreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreadInclude<ExtArgs> | null
    /**
     * The data needed to create a Bread.
     */
    data: XOR<BreadCreateInput, BreadUncheckedCreateInput>
  }

  /**
   * Bread createMany
   */
  export type BreadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Breads.
     */
    data: BreadCreateManyInput | BreadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bread createManyAndReturn
   */
  export type BreadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bread
     */
    select?: BreadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Breads.
     */
    data: BreadCreateManyInput | BreadCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreadIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bread update
   */
  export type BreadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bread
     */
    select?: BreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreadInclude<ExtArgs> | null
    /**
     * The data needed to update a Bread.
     */
    data: XOR<BreadUpdateInput, BreadUncheckedUpdateInput>
    /**
     * Choose, which Bread to update.
     */
    where: BreadWhereUniqueInput
  }

  /**
   * Bread updateMany
   */
  export type BreadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Breads.
     */
    data: XOR<BreadUpdateManyMutationInput, BreadUncheckedUpdateManyInput>
    /**
     * Filter which Breads to update
     */
    where?: BreadWhereInput
  }

  /**
   * Bread upsert
   */
  export type BreadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bread
     */
    select?: BreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreadInclude<ExtArgs> | null
    /**
     * The filter to search for the Bread to update in case it exists.
     */
    where: BreadWhereUniqueInput
    /**
     * In case the Bread found by the `where` argument doesn't exist, create a new Bread with this data.
     */
    create: XOR<BreadCreateInput, BreadUncheckedCreateInput>
    /**
     * In case the Bread was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BreadUpdateInput, BreadUncheckedUpdateInput>
  }

  /**
   * Bread delete
   */
  export type BreadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bread
     */
    select?: BreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreadInclude<ExtArgs> | null
    /**
     * Filter which Bread to delete.
     */
    where: BreadWhereUniqueInput
  }

  /**
   * Bread deleteMany
   */
  export type BreadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Breads to delete
     */
    where?: BreadWhereInput
  }

  /**
   * Bread without action
   */
  export type BreadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bread
     */
    select?: BreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreadInclude<ExtArgs> | null
  }


  /**
   * Model OrderList
   */

  export type AggregateOrderList = {
    _count: OrderListCountAggregateOutputType | null
    _avg: OrderListAvgAggregateOutputType | null
    _sum: OrderListSumAggregateOutputType | null
    _min: OrderListMinAggregateOutputType | null
    _max: OrderListMaxAggregateOutputType | null
  }

  export type OrderListAvgAggregateOutputType = {
    id: number | null
  }

  export type OrderListSumAggregateOutputType = {
    id: number | null
  }

  export type OrderListMinAggregateOutputType = {
    id: number | null
    clientName: string | null
    finished: boolean | null
  }

  export type OrderListMaxAggregateOutputType = {
    id: number | null
    clientName: string | null
    finished: boolean | null
  }

  export type OrderListCountAggregateOutputType = {
    id: number
    clientName: number
    finished: number
    _all: number
  }


  export type OrderListAvgAggregateInputType = {
    id?: true
  }

  export type OrderListSumAggregateInputType = {
    id?: true
  }

  export type OrderListMinAggregateInputType = {
    id?: true
    clientName?: true
    finished?: true
  }

  export type OrderListMaxAggregateInputType = {
    id?: true
    clientName?: true
    finished?: true
  }

  export type OrderListCountAggregateInputType = {
    id?: true
    clientName?: true
    finished?: true
    _all?: true
  }

  export type OrderListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderList to aggregate.
     */
    where?: OrderListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderLists to fetch.
     */
    orderBy?: OrderListOrderByWithRelationInput | OrderListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderLists
    **/
    _count?: true | OrderListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderListMaxAggregateInputType
  }

  export type GetOrderListAggregateType<T extends OrderListAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderList[P]>
      : GetScalarType<T[P], AggregateOrderList[P]>
  }




  export type OrderListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderListWhereInput
    orderBy?: OrderListOrderByWithAggregationInput | OrderListOrderByWithAggregationInput[]
    by: OrderListScalarFieldEnum[] | OrderListScalarFieldEnum
    having?: OrderListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderListCountAggregateInputType | true
    _avg?: OrderListAvgAggregateInputType
    _sum?: OrderListSumAggregateInputType
    _min?: OrderListMinAggregateInputType
    _max?: OrderListMaxAggregateInputType
  }

  export type OrderListGroupByOutputType = {
    id: number
    clientName: string
    finished: boolean
    _count: OrderListCountAggregateOutputType | null
    _avg: OrderListAvgAggregateOutputType | null
    _sum: OrderListSumAggregateOutputType | null
    _min: OrderListMinAggregateOutputType | null
    _max: OrderListMaxAggregateOutputType | null
  }

  type GetOrderListGroupByPayload<T extends OrderListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderListGroupByOutputType[P]>
            : GetScalarType<T[P], OrderListGroupByOutputType[P]>
        }
      >
    >


  export type OrderListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientName?: boolean
    finished?: boolean
    breadItems?: boolean | OrderList$breadItemsArgs<ExtArgs>
    _count?: boolean | OrderListCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderList"]>

  export type OrderListSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientName?: boolean
    finished?: boolean
  }, ExtArgs["result"]["orderList"]>

  export type OrderListSelectScalar = {
    id?: boolean
    clientName?: boolean
    finished?: boolean
  }

  export type OrderListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    breadItems?: boolean | OrderList$breadItemsArgs<ExtArgs>
    _count?: boolean | OrderListCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderListIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrderListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderList"
    objects: {
      breadItems: Prisma.$BreadPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clientName: string
      finished: boolean
    }, ExtArgs["result"]["orderList"]>
    composites: {}
  }

  type OrderListGetPayload<S extends boolean | null | undefined | OrderListDefaultArgs> = $Result.GetResult<Prisma.$OrderListPayload, S>

  type OrderListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderListFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderListCountAggregateInputType | true
    }

  export interface OrderListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderList'], meta: { name: 'OrderList' } }
    /**
     * Find zero or one OrderList that matches the filter.
     * @param {OrderListFindUniqueArgs} args - Arguments to find a OrderList
     * @example
     * // Get one OrderList
     * const orderList = await prisma.orderList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderListFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrderListFindUniqueArgs<ExtArgs>>
    ): Prisma__OrderListClient<$Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OrderList that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderListFindUniqueOrThrowArgs} args - Arguments to find a OrderList
     * @example
     * // Get one OrderList
     * const orderList = await prisma.orderList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrderListFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderListFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrderListClient<$Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OrderList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderListFindFirstArgs} args - Arguments to find a OrderList
     * @example
     * // Get one OrderList
     * const orderList = await prisma.orderList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderListFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderListFindFirstArgs<ExtArgs>>
    ): Prisma__OrderListClient<$Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OrderList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderListFindFirstOrThrowArgs} args - Arguments to find a OrderList
     * @example
     * // Get one OrderList
     * const orderList = await prisma.orderList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrderListFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderListFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrderListClient<$Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OrderLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderLists
     * const orderLists = await prisma.orderList.findMany()
     * 
     * // Get first 10 OrderLists
     * const orderLists = await prisma.orderList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderListWithIdOnly = await prisma.orderList.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderListFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderListFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OrderList.
     * @param {OrderListCreateArgs} args - Arguments to create a OrderList.
     * @example
     * // Create one OrderList
     * const OrderList = await prisma.orderList.create({
     *   data: {
     *     // ... data to create a OrderList
     *   }
     * })
     * 
    **/
    create<T extends OrderListCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderListCreateArgs<ExtArgs>>
    ): Prisma__OrderListClient<$Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many OrderLists.
     * @param {OrderListCreateManyArgs} args - Arguments to create many OrderLists.
     * @example
     * // Create many OrderLists
     * const orderList = await prisma.orderList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends OrderListCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderListCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderLists and returns the data saved in the database.
     * @param {OrderListCreateManyAndReturnArgs} args - Arguments to create many OrderLists.
     * @example
     * // Create many OrderLists
     * const orderList = await prisma.orderList.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderLists and only return the `id`
     * const orderListWithIdOnly = await prisma.orderList.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends OrderListCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderListCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a OrderList.
     * @param {OrderListDeleteArgs} args - Arguments to delete one OrderList.
     * @example
     * // Delete one OrderList
     * const OrderList = await prisma.orderList.delete({
     *   where: {
     *     // ... filter to delete one OrderList
     *   }
     * })
     * 
    **/
    delete<T extends OrderListDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrderListDeleteArgs<ExtArgs>>
    ): Prisma__OrderListClient<$Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OrderList.
     * @param {OrderListUpdateArgs} args - Arguments to update one OrderList.
     * @example
     * // Update one OrderList
     * const orderList = await prisma.orderList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderListUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderListUpdateArgs<ExtArgs>>
    ): Prisma__OrderListClient<$Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OrderLists.
     * @param {OrderListDeleteManyArgs} args - Arguments to filter OrderLists to delete.
     * @example
     * // Delete a few OrderLists
     * const { count } = await prisma.orderList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderListDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderListDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderLists
     * const orderList = await prisma.orderList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderListUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrderListUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderList.
     * @param {OrderListUpsertArgs} args - Arguments to update or create a OrderList.
     * @example
     * // Update or create a OrderList
     * const orderList = await prisma.orderList.upsert({
     *   create: {
     *     // ... data to create a OrderList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderList we want to update
     *   }
     * })
    **/
    upsert<T extends OrderListUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrderListUpsertArgs<ExtArgs>>
    ): Prisma__OrderListClient<$Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OrderLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderListCountArgs} args - Arguments to filter OrderLists to count.
     * @example
     * // Count the number of OrderLists
     * const count = await prisma.orderList.count({
     *   where: {
     *     // ... the filter for the OrderLists we want to count
     *   }
     * })
    **/
    count<T extends OrderListCountArgs>(
      args?: Subset<T, OrderListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderListAggregateArgs>(args: Subset<T, OrderListAggregateArgs>): Prisma.PrismaPromise<GetOrderListAggregateType<T>>

    /**
     * Group by OrderList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderListGroupByArgs['orderBy'] }
        : { orderBy?: OrderListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderList model
   */
  readonly fields: OrderListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    breadItems<T extends OrderList$breadItemsArgs<ExtArgs> = {}>(args?: Subset<T, OrderList$breadItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BreadPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the OrderList model
   */ 
  interface OrderListFieldRefs {
    readonly id: FieldRef<"OrderList", 'Int'>
    readonly clientName: FieldRef<"OrderList", 'String'>
    readonly finished: FieldRef<"OrderList", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * OrderList findUnique
   */
  export type OrderListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderList
     */
    select?: OrderListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderListInclude<ExtArgs> | null
    /**
     * Filter, which OrderList to fetch.
     */
    where: OrderListWhereUniqueInput
  }

  /**
   * OrderList findUniqueOrThrow
   */
  export type OrderListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderList
     */
    select?: OrderListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderListInclude<ExtArgs> | null
    /**
     * Filter, which OrderList to fetch.
     */
    where: OrderListWhereUniqueInput
  }

  /**
   * OrderList findFirst
   */
  export type OrderListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderList
     */
    select?: OrderListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderListInclude<ExtArgs> | null
    /**
     * Filter, which OrderList to fetch.
     */
    where?: OrderListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderLists to fetch.
     */
    orderBy?: OrderListOrderByWithRelationInput | OrderListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderLists.
     */
    cursor?: OrderListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderLists.
     */
    distinct?: OrderListScalarFieldEnum | OrderListScalarFieldEnum[]
  }

  /**
   * OrderList findFirstOrThrow
   */
  export type OrderListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderList
     */
    select?: OrderListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderListInclude<ExtArgs> | null
    /**
     * Filter, which OrderList to fetch.
     */
    where?: OrderListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderLists to fetch.
     */
    orderBy?: OrderListOrderByWithRelationInput | OrderListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderLists.
     */
    cursor?: OrderListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderLists.
     */
    distinct?: OrderListScalarFieldEnum | OrderListScalarFieldEnum[]
  }

  /**
   * OrderList findMany
   */
  export type OrderListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderList
     */
    select?: OrderListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderListInclude<ExtArgs> | null
    /**
     * Filter, which OrderLists to fetch.
     */
    where?: OrderListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderLists to fetch.
     */
    orderBy?: OrderListOrderByWithRelationInput | OrderListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderLists.
     */
    cursor?: OrderListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderLists.
     */
    skip?: number
    distinct?: OrderListScalarFieldEnum | OrderListScalarFieldEnum[]
  }

  /**
   * OrderList create
   */
  export type OrderListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderList
     */
    select?: OrderListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderListInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderList.
     */
    data: XOR<OrderListCreateInput, OrderListUncheckedCreateInput>
  }

  /**
   * OrderList createMany
   */
  export type OrderListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderLists.
     */
    data: OrderListCreateManyInput | OrderListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderList createManyAndReturn
   */
  export type OrderListCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderList
     */
    select?: OrderListSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OrderLists.
     */
    data: OrderListCreateManyInput | OrderListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderList update
   */
  export type OrderListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderList
     */
    select?: OrderListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderListInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderList.
     */
    data: XOR<OrderListUpdateInput, OrderListUncheckedUpdateInput>
    /**
     * Choose, which OrderList to update.
     */
    where: OrderListWhereUniqueInput
  }

  /**
   * OrderList updateMany
   */
  export type OrderListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderLists.
     */
    data: XOR<OrderListUpdateManyMutationInput, OrderListUncheckedUpdateManyInput>
    /**
     * Filter which OrderLists to update
     */
    where?: OrderListWhereInput
  }

  /**
   * OrderList upsert
   */
  export type OrderListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderList
     */
    select?: OrderListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderListInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderList to update in case it exists.
     */
    where: OrderListWhereUniqueInput
    /**
     * In case the OrderList found by the `where` argument doesn't exist, create a new OrderList with this data.
     */
    create: XOR<OrderListCreateInput, OrderListUncheckedCreateInput>
    /**
     * In case the OrderList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderListUpdateInput, OrderListUncheckedUpdateInput>
  }

  /**
   * OrderList delete
   */
  export type OrderListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderList
     */
    select?: OrderListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderListInclude<ExtArgs> | null
    /**
     * Filter which OrderList to delete.
     */
    where: OrderListWhereUniqueInput
  }

  /**
   * OrderList deleteMany
   */
  export type OrderListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderLists to delete
     */
    where?: OrderListWhereInput
  }

  /**
   * OrderList.breadItems
   */
  export type OrderList$breadItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bread
     */
    select?: BreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BreadInclude<ExtArgs> | null
    where?: BreadWhereInput
    orderBy?: BreadOrderByWithRelationInput | BreadOrderByWithRelationInput[]
    cursor?: BreadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BreadScalarFieldEnum | BreadScalarFieldEnum[]
  }

  /**
   * OrderList without action
   */
  export type OrderListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderList
     */
    select?: OrderListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderListInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BreadScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    quantity: 'quantity',
    orderId: 'orderId'
  };

  export type BreadScalarFieldEnum = (typeof BreadScalarFieldEnum)[keyof typeof BreadScalarFieldEnum]


  export const OrderListScalarFieldEnum: {
    id: 'id',
    clientName: 'clientName',
    finished: 'finished'
  };

  export type OrderListScalarFieldEnum = (typeof OrderListScalarFieldEnum)[keyof typeof OrderListScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type BreadWhereInput = {
    AND?: BreadWhereInput | BreadWhereInput[]
    OR?: BreadWhereInput[]
    NOT?: BreadWhereInput | BreadWhereInput[]
    id?: IntFilter<"Bread"> | number
    name?: StringFilter<"Bread"> | string
    price?: FloatFilter<"Bread"> | number
    quantity?: IntFilter<"Bread"> | number
    orderId?: IntFilter<"Bread"> | number
    order?: XOR<OrderListRelationFilter, OrderListWhereInput>
  }

  export type BreadOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orderId?: SortOrder
    order?: OrderListOrderByWithRelationInput
  }

  export type BreadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BreadWhereInput | BreadWhereInput[]
    OR?: BreadWhereInput[]
    NOT?: BreadWhereInput | BreadWhereInput[]
    name?: StringFilter<"Bread"> | string
    price?: FloatFilter<"Bread"> | number
    quantity?: IntFilter<"Bread"> | number
    orderId?: IntFilter<"Bread"> | number
    order?: XOR<OrderListRelationFilter, OrderListWhereInput>
  }, "id">

  export type BreadOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orderId?: SortOrder
    _count?: BreadCountOrderByAggregateInput
    _avg?: BreadAvgOrderByAggregateInput
    _max?: BreadMaxOrderByAggregateInput
    _min?: BreadMinOrderByAggregateInput
    _sum?: BreadSumOrderByAggregateInput
  }

  export type BreadScalarWhereWithAggregatesInput = {
    AND?: BreadScalarWhereWithAggregatesInput | BreadScalarWhereWithAggregatesInput[]
    OR?: BreadScalarWhereWithAggregatesInput[]
    NOT?: BreadScalarWhereWithAggregatesInput | BreadScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Bread"> | number
    name?: StringWithAggregatesFilter<"Bread"> | string
    price?: FloatWithAggregatesFilter<"Bread"> | number
    quantity?: IntWithAggregatesFilter<"Bread"> | number
    orderId?: IntWithAggregatesFilter<"Bread"> | number
  }

  export type OrderListWhereInput = {
    AND?: OrderListWhereInput | OrderListWhereInput[]
    OR?: OrderListWhereInput[]
    NOT?: OrderListWhereInput | OrderListWhereInput[]
    id?: IntFilter<"OrderList"> | number
    clientName?: StringFilter<"OrderList"> | string
    finished?: BoolFilter<"OrderList"> | boolean
    breadItems?: BreadListRelationFilter
  }

  export type OrderListOrderByWithRelationInput = {
    id?: SortOrder
    clientName?: SortOrder
    finished?: SortOrder
    breadItems?: BreadOrderByRelationAggregateInput
  }

  export type OrderListWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderListWhereInput | OrderListWhereInput[]
    OR?: OrderListWhereInput[]
    NOT?: OrderListWhereInput | OrderListWhereInput[]
    clientName?: StringFilter<"OrderList"> | string
    finished?: BoolFilter<"OrderList"> | boolean
    breadItems?: BreadListRelationFilter
  }, "id">

  export type OrderListOrderByWithAggregationInput = {
    id?: SortOrder
    clientName?: SortOrder
    finished?: SortOrder
    _count?: OrderListCountOrderByAggregateInput
    _avg?: OrderListAvgOrderByAggregateInput
    _max?: OrderListMaxOrderByAggregateInput
    _min?: OrderListMinOrderByAggregateInput
    _sum?: OrderListSumOrderByAggregateInput
  }

  export type OrderListScalarWhereWithAggregatesInput = {
    AND?: OrderListScalarWhereWithAggregatesInput | OrderListScalarWhereWithAggregatesInput[]
    OR?: OrderListScalarWhereWithAggregatesInput[]
    NOT?: OrderListScalarWhereWithAggregatesInput | OrderListScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderList"> | number
    clientName?: StringWithAggregatesFilter<"OrderList"> | string
    finished?: BoolWithAggregatesFilter<"OrderList"> | boolean
  }

  export type BreadCreateInput = {
    name: string
    price: number
    quantity: number
    order: OrderListCreateNestedOneWithoutBreadItemsInput
  }

  export type BreadUncheckedCreateInput = {
    id?: number
    name: string
    price: number
    quantity: number
    orderId: number
  }

  export type BreadUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    order?: OrderListUpdateOneRequiredWithoutBreadItemsNestedInput
  }

  export type BreadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type BreadCreateManyInput = {
    id?: number
    name: string
    price: number
    quantity: number
    orderId: number
  }

  export type BreadUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type BreadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type OrderListCreateInput = {
    clientName: string
    finished?: boolean
    breadItems?: BreadCreateNestedManyWithoutOrderInput
  }

  export type OrderListUncheckedCreateInput = {
    id?: number
    clientName: string
    finished?: boolean
    breadItems?: BreadUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderListUpdateInput = {
    clientName?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    breadItems?: BreadUpdateManyWithoutOrderNestedInput
  }

  export type OrderListUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    breadItems?: BreadUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderListCreateManyInput = {
    id?: number
    clientName: string
    finished?: boolean
  }

  export type OrderListUpdateManyMutationInput = {
    clientName?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderListUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type OrderListRelationFilter = {
    is?: OrderListWhereInput
    isNot?: OrderListWhereInput
  }

  export type BreadCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orderId?: SortOrder
  }

  export type BreadAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orderId?: SortOrder
  }

  export type BreadMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orderId?: SortOrder
  }

  export type BreadMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orderId?: SortOrder
  }

  export type BreadSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orderId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BreadListRelationFilter = {
    every?: BreadWhereInput
    some?: BreadWhereInput
    none?: BreadWhereInput
  }

  export type BreadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderListCountOrderByAggregateInput = {
    id?: SortOrder
    clientName?: SortOrder
    finished?: SortOrder
  }

  export type OrderListAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrderListMaxOrderByAggregateInput = {
    id?: SortOrder
    clientName?: SortOrder
    finished?: SortOrder
  }

  export type OrderListMinOrderByAggregateInput = {
    id?: SortOrder
    clientName?: SortOrder
    finished?: SortOrder
  }

  export type OrderListSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type OrderListCreateNestedOneWithoutBreadItemsInput = {
    create?: XOR<OrderListCreateWithoutBreadItemsInput, OrderListUncheckedCreateWithoutBreadItemsInput>
    connectOrCreate?: OrderListCreateOrConnectWithoutBreadItemsInput
    connect?: OrderListWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderListUpdateOneRequiredWithoutBreadItemsNestedInput = {
    create?: XOR<OrderListCreateWithoutBreadItemsInput, OrderListUncheckedCreateWithoutBreadItemsInput>
    connectOrCreate?: OrderListCreateOrConnectWithoutBreadItemsInput
    upsert?: OrderListUpsertWithoutBreadItemsInput
    connect?: OrderListWhereUniqueInput
    update?: XOR<XOR<OrderListUpdateToOneWithWhereWithoutBreadItemsInput, OrderListUpdateWithoutBreadItemsInput>, OrderListUncheckedUpdateWithoutBreadItemsInput>
  }

  export type BreadCreateNestedManyWithoutOrderInput = {
    create?: XOR<BreadCreateWithoutOrderInput, BreadUncheckedCreateWithoutOrderInput> | BreadCreateWithoutOrderInput[] | BreadUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: BreadCreateOrConnectWithoutOrderInput | BreadCreateOrConnectWithoutOrderInput[]
    createMany?: BreadCreateManyOrderInputEnvelope
    connect?: BreadWhereUniqueInput | BreadWhereUniqueInput[]
  }

  export type BreadUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<BreadCreateWithoutOrderInput, BreadUncheckedCreateWithoutOrderInput> | BreadCreateWithoutOrderInput[] | BreadUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: BreadCreateOrConnectWithoutOrderInput | BreadCreateOrConnectWithoutOrderInput[]
    createMany?: BreadCreateManyOrderInputEnvelope
    connect?: BreadWhereUniqueInput | BreadWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BreadUpdateManyWithoutOrderNestedInput = {
    create?: XOR<BreadCreateWithoutOrderInput, BreadUncheckedCreateWithoutOrderInput> | BreadCreateWithoutOrderInput[] | BreadUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: BreadCreateOrConnectWithoutOrderInput | BreadCreateOrConnectWithoutOrderInput[]
    upsert?: BreadUpsertWithWhereUniqueWithoutOrderInput | BreadUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: BreadCreateManyOrderInputEnvelope
    set?: BreadWhereUniqueInput | BreadWhereUniqueInput[]
    disconnect?: BreadWhereUniqueInput | BreadWhereUniqueInput[]
    delete?: BreadWhereUniqueInput | BreadWhereUniqueInput[]
    connect?: BreadWhereUniqueInput | BreadWhereUniqueInput[]
    update?: BreadUpdateWithWhereUniqueWithoutOrderInput | BreadUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: BreadUpdateManyWithWhereWithoutOrderInput | BreadUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: BreadScalarWhereInput | BreadScalarWhereInput[]
  }

  export type BreadUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<BreadCreateWithoutOrderInput, BreadUncheckedCreateWithoutOrderInput> | BreadCreateWithoutOrderInput[] | BreadUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: BreadCreateOrConnectWithoutOrderInput | BreadCreateOrConnectWithoutOrderInput[]
    upsert?: BreadUpsertWithWhereUniqueWithoutOrderInput | BreadUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: BreadCreateManyOrderInputEnvelope
    set?: BreadWhereUniqueInput | BreadWhereUniqueInput[]
    disconnect?: BreadWhereUniqueInput | BreadWhereUniqueInput[]
    delete?: BreadWhereUniqueInput | BreadWhereUniqueInput[]
    connect?: BreadWhereUniqueInput | BreadWhereUniqueInput[]
    update?: BreadUpdateWithWhereUniqueWithoutOrderInput | BreadUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: BreadUpdateManyWithWhereWithoutOrderInput | BreadUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: BreadScalarWhereInput | BreadScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type OrderListCreateWithoutBreadItemsInput = {
    clientName: string
    finished?: boolean
  }

  export type OrderListUncheckedCreateWithoutBreadItemsInput = {
    id?: number
    clientName: string
    finished?: boolean
  }

  export type OrderListCreateOrConnectWithoutBreadItemsInput = {
    where: OrderListWhereUniqueInput
    create: XOR<OrderListCreateWithoutBreadItemsInput, OrderListUncheckedCreateWithoutBreadItemsInput>
  }

  export type OrderListUpsertWithoutBreadItemsInput = {
    update: XOR<OrderListUpdateWithoutBreadItemsInput, OrderListUncheckedUpdateWithoutBreadItemsInput>
    create: XOR<OrderListCreateWithoutBreadItemsInput, OrderListUncheckedCreateWithoutBreadItemsInput>
    where?: OrderListWhereInput
  }

  export type OrderListUpdateToOneWithWhereWithoutBreadItemsInput = {
    where?: OrderListWhereInput
    data: XOR<OrderListUpdateWithoutBreadItemsInput, OrderListUncheckedUpdateWithoutBreadItemsInput>
  }

  export type OrderListUpdateWithoutBreadItemsInput = {
    clientName?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderListUncheckedUpdateWithoutBreadItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BreadCreateWithoutOrderInput = {
    name: string
    price: number
    quantity: number
  }

  export type BreadUncheckedCreateWithoutOrderInput = {
    id?: number
    name: string
    price: number
    quantity: number
  }

  export type BreadCreateOrConnectWithoutOrderInput = {
    where: BreadWhereUniqueInput
    create: XOR<BreadCreateWithoutOrderInput, BreadUncheckedCreateWithoutOrderInput>
  }

  export type BreadCreateManyOrderInputEnvelope = {
    data: BreadCreateManyOrderInput | BreadCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type BreadUpsertWithWhereUniqueWithoutOrderInput = {
    where: BreadWhereUniqueInput
    update: XOR<BreadUpdateWithoutOrderInput, BreadUncheckedUpdateWithoutOrderInput>
    create: XOR<BreadCreateWithoutOrderInput, BreadUncheckedCreateWithoutOrderInput>
  }

  export type BreadUpdateWithWhereUniqueWithoutOrderInput = {
    where: BreadWhereUniqueInput
    data: XOR<BreadUpdateWithoutOrderInput, BreadUncheckedUpdateWithoutOrderInput>
  }

  export type BreadUpdateManyWithWhereWithoutOrderInput = {
    where: BreadScalarWhereInput
    data: XOR<BreadUpdateManyMutationInput, BreadUncheckedUpdateManyWithoutOrderInput>
  }

  export type BreadScalarWhereInput = {
    AND?: BreadScalarWhereInput | BreadScalarWhereInput[]
    OR?: BreadScalarWhereInput[]
    NOT?: BreadScalarWhereInput | BreadScalarWhereInput[]
    id?: IntFilter<"Bread"> | number
    name?: StringFilter<"Bread"> | string
    price?: FloatFilter<"Bread"> | number
    quantity?: IntFilter<"Bread"> | number
    orderId?: IntFilter<"Bread"> | number
  }

  export type BreadCreateManyOrderInput = {
    id?: number
    name: string
    price: number
    quantity: number
  }

  export type BreadUpdateWithoutOrderInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type BreadUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type BreadUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use OrderListCountOutputTypeDefaultArgs instead
     */
    export type OrderListCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderListCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BreadDefaultArgs instead
     */
    export type BreadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BreadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderListDefaultArgs instead
     */
    export type OrderListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderListDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}